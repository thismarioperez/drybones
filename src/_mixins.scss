/**
 * A mixin targeting a specific device width and larger.
 * These are the available targets: 'sm', 'md', 'lg', 'xl'
 *
 * @param {string} $media The target media
 * @see https://benjaminhorn.io/code/responsive-sass-mixin-helpers/
 */
@mixin respond-from($media) {
    @each $breakpoint in $breakpoints {
        @if $media==nth($breakpoint, 1) {
            @media (min-width: #{nth($breakpoint, 2)}) {
                @content;
            }
        }
    }
}

/**
 * Round columns width to a number with 2 decimal places.
 * This prevents the layout from breaking in IE.
 * 
 * @param {int} $i Current amount of columns
 * @param {int} $columns Total columns in grid
 * @return {string} The stringified width as a percentage rounded to 2 decimal places
 * @see https://medium.com/codyhouse/create-your-design-system-part-2-grid-layout-aa961d59b8d6
 */
@function round-width ($i, $columns) {
    $width: floor(100 * $i * 100/ $columns) / 100;
    @return $width#{"%"};
}

/**
 * Generates modifier classes for a grid of columns.
 * The result will be --[col] E.g. .col--6
 *
 * @param {int} $columns Amount of columns
 * @see https://benjaminhorn.io/code/simple-sass-mixins-for-generating-grids-similar-to-bootstrap/
 */
@mixin col-generator-base($columns) {
    @for $i from 1 through $columns {
        &--#{$i} {
            $width: round-width($i, $columns);
            flex: 1 0 $width;
            max-width: $width;
        }
    }
}

/**
 * Generates modifier classes for a grid of columns, prefixed by size.
 * The result will be --[breakpoint]-[col] E.g. .col--xs-6
 *
 * @param {string} $bp The name of the breakpoint target (e.g. xs, sm, md, lg, xl, etc.)
 * @param {int} $columns Amount of columns
 * @see https://benjaminhorn.io/code/simple-sass-mixins-for-generating-grids-similar-to-bootstrap/
 */
@mixin col-generator($bp, $columns) {
    @include respond-from($bp) {
        @for $i from 1 through $columns {
            &--#{$bp}-#{$i} {
                $width: round-width($i, $columns);
                flex: 1 0 $width;
                max-width: $width;
            }
        }
    }
}

/**
 * Generates modifier classes for order switching of grid columns
 * The result will be --order-[index] E.g. .col--order-3
 *
 * @param {int} $columns Amount of columns
 */
@mixin order-generator-base($columns) {
    @for $i from 1 through $columns {
        &--order-#{$i} {
            order: $i;
        }
    }
}

/**
 * Generates modifier classes for order switching of grid columns
 * The result will be --order-[breakpoint]-[index] E.g. .col--md-order-3
 * 
 * @param {string} $bp The name of the breakpoint target (e.g. xs, sm, md, lg, xl, etc.)
 * @param {int} $columns Amount of columns
 */
@mixin order-generator($bp, $columns) {
    @include respond-from($bp) {
        @for $i from 1 through $columns {
            &--order-#{$bp}-#{$i} {
                order: $i;
            }
        }
    }
}